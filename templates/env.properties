# Applied by PropertyPlaceholderConfigurer from "applicationContext.xml".
# This file defines the Spring variables for the application. This is the
# only file in a Spring application that should contain environment specific
# information.  The rest of the Spring configuration should use Spring 
# variables in the form ${variable}.

# Database related properties.  Typically, an application will use the JNDI
# values when deployed to a container, and the JDBC values for test. 
# Applications that don't connect to a database can omit these values, but 
# remember that the Framework can record workflow statistics if there is a 
# database connection..
# Targeted at system administrators, to avoid touching the context XML files.
oracle.jdbc.driver=@oracle.jdbc.driver@
oracle.jdbc.url=@oracle.jdbc.url@
oracle.jdbc.username=@oracle.jdbc.username@
oracle.jdbc.password=@oracle.jdbc.password@
mysql.jdbc.driver=@mysql.jdbc.driver@
mysql.jdbc.url=@mysql.jdbc.url@
mysql.jdbc.username=@mysql.jdbc.username@
mysql.jdbc.password=@mysql.jdbc.password@
# Properties with JNDI settings.  Applications that use a JNDI continer for
# database connections will need these values.
oracle.data.source=@oracle.data.source@
mysql.data.source=@mysql.data.source@

hibernate.show.sql=@hibernate.show.sql@
