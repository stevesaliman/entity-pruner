<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
    <!--
        This configuration file defines beans needed for database connectivity
        and transaction management.  This version of the file is for
        applications that are not deployed to a Glassfish container. This file
        is also used by unit tests, which run outside a container. The beans
        in this file depend on an embeded JOTM server, which provides the 
        container functionality.
          
        The beans in this file are not typically used on other Spring files,
        but Spring will inject the entityManagerFactory into annotated DAOs
    -->

    <!-- enable JPA post processing annotations. We don't use the
         <context:annotation-config/> tag because we don't want Spring 
         processing @EJB annotations. -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>


    <!-- Enable transaction annotation processing. -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- ############################ JPA ################################# -->
    <!-- Defines the data source to use for database connections -->
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="autoCommitOnClose" value="false"/>
        <property name="maxPoolSize" value="10"/>
        <property name="maxIdleTime" value="1"/>
        <property name="preferredTestQuery" value="SELECT 1 FROM dual"/>
    </bean>
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- ############################ JTA ################################# -->
    <!-- Haven't tested thread safety here yet. -->
    <!-- Enable Spring's JOTM support -->
<!--
    <bean id="jotm" class="org.springframework.transaction.jta.JotmFactoryBean"/>
-->

    <!--  The Data Source needs to be something JOTM knows about so we get 
          proper rollback behavior in unit tests. -->
<!--
    <bean id="dataSource" class="org.enhydra.jdbc.pool.StandardXAPoolDataSource"
          destroy-method="shutdown">
        <property name="dataSource">
            <bean class="org.enhydra.jdbc.standard.StandardXADataSource" 
                  destroy-method="shutdown">
                <property name="transactionManager" ref="Jotm" />
                <property name="driverName" value="${jdbc.driverClassName}" />
                <property name="url" value="${jdbc.url}" />
            </bean>
        </property>
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
-->

    <!-- Entity Manager Factory for use with JOTM -->
<!--
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean
                class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            </bean>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.transaction.manager_lookup_class"
                       value="org.hibernate.transaction.JOTMTransactionManagerLookup"/>
                <entry key="hibernate.dialect" 
                       value="org.hibernate.dialect.Oracle10gDialect"/>
                <entry key="hibernate.show_sql" value="${hibernate.show.sql}"/>
                <entry key="hibernate.generate_statistics" value="true"/>
                <entry key="hibernate.cache.provider_class" 
                       value="net.sf.ehcache.hibernate.EhCacheProvider"/>
                <entry key="hibernate.jdbc.use_get_generated_keys" 
                       value="true"/>
                <entry key="hibernate.jdbc.fetch_size" value="50"/>
                <entry key="hibernate.jdbc.batch_size" value="15"/>
                <entry key="hibernate.archive.autodetection" value="class"/>
            </map>
        </property>
    </bean>
-->


    <!-- Transaction Manager for the JOTM server -->
    <!--  This is the JTA version -->
<!--
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="userTransaction" ref="jotm"/>
        <property name="transactionManager" ref="jotm"/>
    </bean>
-->
</beans>
