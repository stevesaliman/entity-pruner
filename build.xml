<project name="entity-pruner" default="test-report-and-build" basedir=".">

    <!--
        Default deploy environment is "dev" but can be overridden
        on the command line when building/deploying to other environments.
        This deploy target is used to read the appropriate
        properties file to define all properties for that
        deployment target environment.
    -->
    <property name="deploy.environment.name"  value="dev"/>
    <property file="build-${deploy.environment.name}.properties"/>

    <!-- Defines the project directory structure -->
    <property name="src.dir"             value="src"/>
    <property name="lib.dir"             value="lib"/>
    <property name="database.dir"        value="database"/>
    <property name="dist.dir"            value="dist"/>
    <property name="dist.lib.dir"        value="${dist.dir}/lib"/>
    <property name="dist.doc.dir"        value="${dist.dir}/docs/api"/>
    <property name="dist.properties.dir" value="${dist.dir}/properties"/>   
    <property name="dist.templates.dir"  value="${dist.dir}/templates"/>   
    <property name="dist.database.dir"   value="${dist.dir}/database"/>
    <property name="build.dir"           value="build"/>
    <property name="src.build.dir"       value="${build.dir}/src"/>
    <property name="test.build.dir"      value="${build.dir}/test"/>
    <property name="properties.dir"      value="properties"/>
    <property name="templates.dir"       value="templates"/>
    <property name="eclipse.config.dir"  value="eclipse-config"/>
    <property name="doc.dir"             value="docs"/>
    <property name="test.dir"            value="test"/>
    <property name="test.src.dir"        value="${test.dir}"/>
    <property name="test.properties.dir" value="${test.build.dir}/properties"/>
    <property name="test.results.dir"    value="${test.build.dir}/results"/>
    <property name="test.report.dir"     value="${build.dir}/test-report-html"/>
    <property name="deploy.name"         value="entity-pruner"/>
    <property name="entity-pruner.jar"       value="${deploy.name}-${application.version}.jar"/>
    <property name="project.name"        value="Entity Pruner"/>
    <property name="project.vendor"      value="Steven C. Saliman"/>
    <property name="project.package"     value="net.saliman.entitypruner"/>
    <!-- if logging level wasn't in the properties file, use WARN-->
    <property name="default.logging.level" value="WARN"/>
    <!-- if hibernate.show.sql wasn't in the properties file, use false -->
    <property name="hibernate.show.sql"  value="false"/>

    <!-- Define compiler properties -->
    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize"    value="false"/>
    <property name="build.compiler"      value="modern"/>
    <property name="compiler.source"     value="1.6"/>
    <property name="compiler.target"     value="1.6"/>
    <property name="compiler.args"       value="-Xlint"/>

    <!-- javadoc properties -->
    <property name="doc.window.title" value="Entity Pruner Javadoc"/>
    <property name="doc.title" value="&lt;h3&gt;Entiy Pruner&lt;/h3&gt;"/>
    <property name="doc.bottom" value="&lt;i&gt;Copyright &amp;#169; 2008 Steven C. Saliman All Rights Reserved.&lt;/i&gt;"/>

    <!-- 
        filters for token replacement. 
    -->
    <filter token="application.version" value="${application.version}"/>
    <filter token="default.log.level" value="${default.log.level}"/>
    <filter token="jndi.data.source" value="${jndi.data.source}"/>
    <filter token="test.jdbc.url" value="${test.jdbc.url}"/>
    <filter token="test.jdbc.username" value="${test.jdbc.username}"/>
    <filter token="test.jdbc.password" value="${test.jdbc.password}"/>
    <filter token="test.jdbc.driver" value="${test.jdbc.driver}"/>
    <filter token="hibernate.show.sql" value="${hibernate.show.sql}"/>
    
    <!-- Classpath for compilation -->
    <path id="project.class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement path="${src.dir}"/>
    </path>


    <!-- ==================== Targets ================================== -->
    <!--
        This is the default target.  It does a clean, a full build, 
        runs unit tests, and if successful, does a dist.
    -->
    <target name="test-report-and-build" depends="unit-test-report,dist"
            description="Run all unit tests, create reports, and build the distribution if they pass"
    >
    </target>

    <!--
        =================== Setup targets ================================
        These targets setup the properties needed by the rest of the build .
    -->
    <!-- an internal target to ensure required properties are set. -->
    <target name="-check-properties">
        <fail unless="application.version">
            You must set "application.version" property.
        </fail>
        <fail unless="test.jdbc.url">
            You must set "test.jdbc.url" property.
        </fail>
        <fail unless="test.jdbc.driver">
            You must set "test.jdbc.driver" property.
        </fail>
        <fail unless="test.jdbc.username">
            You must set "test.jdbc.username" property.
        </fail>
        <fail unless="test.jdbc.password">
            You must set "test.jdbc.password" property.
        </fail>
        <fail unless="test.log.dir">
            You must set "test.log.dir" property.
        </fail>
        <fail unless="test.log.prefix">
            You must set "test.log.prefix" property.
        </fail>
    </target>

    <!-- ==================== Clean Target ================================ -->
    <!--
      The "clean" target deletes any previous "build" and "dist" directory,
      so that you can be ensured the application can be built from scratch.
    -->
    <target name="clean"
            description="Remove all the artifacts of the build process">
        <delete dir="${build.dir}" includeEmptyDirs="true"/>
        <delete dir="${dist.dir}" includeEmptyDirs="true"/>
        <delete dir="${doc.dir}/api" includeEmptyDirs="true"/>
        <delete file="${test.dir}/openejb.xml"/>
        <delete file="${test.log.dir}/${test.log.prefix}.log"/>
        <delete file="${test.log.dir}/${test.log.prefix}-security.log"/>
        <delete file="${test.log.dir}/${test.log.prefix}-event.log"/>
        <!-- Clean out the eclipse config directory, but don't delete it -->
        <delete>
            <fileset dir="${eclipse.config.dir}"
                     includes="**/*"/>
        </delete>
    </target>


    <target name="prep" depends="-check-properties"
            description="Create required directories prior to building and copy the appropriate properties files" >
		<tstamp>
            <format property="DSTAMP" pattern="yyyy-MM-dd"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${src.build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.doc.dir}"/>
        <copy file="${templates.dir}/openejb.xml"
              tofile="${test.dir}/openejb.xml"
              overwrite="yes" filtering="true"/>
    </target>

    <!-- copy files needed for unit tests. -->
    <target name="prep-test"
            depends="-check-properties"
    		description="Create directories and move files needed for unit testing" >
        <filter token="log.dir" value="${test.log.dir}"/>
        <filter token="log.file.prefix" value="${test.log.prefix}"/>
	    <mkdir dir="${test.build.dir}"/>
        <copy file="${properties.dir}/applicationContext-test.xml"
              tofile="${test.properties.dir}/applicationContext-test.xml"
              overwrite="yes" preservelastmodified="true"/>
        <copy file="${properties.dir}/db-nocontainer.xml"
              tofile="${test.properties.dir}/db-nocontainer.xml"
              overwrite="yes" preservelastmodified="true"/>
        <copy file="${templates.dir}/persistence.xml"
              tofile="${test.properties.dir}/META-INF/persistence.xml"
              overwrite="yes" filtering="true"/>
        <copy file="${templates.dir}/env.properties"
              tofile="${test.properties.dir}/env.properties"
              overwrite="yes" filtering="true"/>
        <copy file="${templates.dir}/log4j.properties"
              tofile="${test.properties.dir}/log4j.properties"
              overwrite="yes" filtering="true"/>
    </target>

    <!-- 
        Helper task for developers using Eclipse.  Copies files to directories
        Eclipse will know about.  We have certain configuration files that
        Eclipse will need to have in a directory marked as a source directory,
        but we want that directory to be completely seperate from directories
        Ant will use.  This task copies files to that directory.
    -->
    <target name="prep-eclipse"
        description="Helper task to copy config files for use with Eclipse"
        depends="prep,prep-test"
    >
        <mkdir dir="${eclipse.config.dir}/META-INF"/>
        <filter token="log.dir" value="${test.log.dir}"/>
        <filter token="log.file.prefix" value="${test.log.prefix}"/>
        <copy file="${templates.dir}/env.properties"
              tofile="${eclipse.config.dir}/env.properties"
              overwrite="yes" filtering="true"/>
        <copy file="${templates.dir}/log4j.properties"
              tofile="${eclipse.config.dir}/log4j.properties"
              overwrite="yes" filtering="true"/>
        <copy file="${templates.dir}/persistence.xml"
              tofile="${eclipse.config.dir}/META-INF/persistence.xml"
              overwrite="yes" filtering="true"/>
    </target>

    <!-- ================== Compile Targets =============================== -->
    <!--
      The "compile" target transforms source files (from your "src" directory)
      into object files in the appropriate location in the build directory.
      We need the client directory in the server compile because it contains
      the callback service defs.
    -->
    <target name="compile"
            depends="-check-properties,prep"
            description="Compile the Java source" >
        <mkdir dir="${src.build.dir}/classes"/>
        <javac srcdir="${src.dir}"
               destdir="${src.build.dir}/classes"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               source="${compiler.source}"
               target="${compiler.target}" >
            <!--compilerarg value="${compiler.args}"/-->
            <include name="**/*.java"/>
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <!-- compile unit tests -->
    <target name="compile-test"
            depends="-check-properties, compile"
            description="Compile all of the unit tests for the project" >
        <mkdir dir="${test.build.dir}/classes"/>
        <javac srcdir="${test.src.dir}/com"
               destdir="${test.build.dir}/classes"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               source="${compiler.source}"
               target="${compiler.target}" >
            <include name="**/*.java"/>
            <classpath>
				<path refid="project.class.path"/>
            	<pathelement path="${src.build.dir}/classes"/>
            </classpath>
        </javac>
        <copy todir="${test.build.dir}/classes"
              preservelastmodified="true">
            <fileset dir="${test.dir}"
                     includes="**/*.xml"/>
        </copy>
        <copy todir="${test.build.dir}/classes"
              preservelastmodified="true">
            <fileset dir="${test.dir}"
                     includes="**/*.properties"/>
        </copy>
    </target>

    <!-- ==================== Jar Target ================================== -->
    <!--
      The "jar" target copies the contents of the build directory into a
      jar file.
    -->
    <target name="jar"
            depends="compile"
            description="Jar the original source into a single jar file" >
        <buildnumber/>
        <jar destfile="${src.build.dir}/${entity-pruner.jar}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="${project.package}">
                   <attribute name="Implementation-Title" value="${project.name}"/>
                   <attribute name="Implementation-Vendor" value="${project.vendor}"/>
                   <attribute name="Implementation-Version" value="${application.version}-b${build.number} (created ${DSTAMP})"/>
                </section>
            </manifest>
            <fileset dir="${src.build.dir}/classes"/>
        </jar>
    </target>
  
    <!-- ==================== Distribution Targets ======================== -->
    <!-- Make all dist targets here for consistency -->
    <target name="dist-all" depends="dist">
    </target>

    <!-- Make the entity-pruner distribution. -->
    <target name="dist"
            depends="jar, javadoc"
            description="Create the distribution package" >
        <delete file="${dist.dir}/${entity-pruner.jar}"/>
        <copy file="${src.build.dir}/${entity-pruner.jar}"
              todir="${dist.dir}" 
              preservelastmodified="true"/>
		<copy todir="${dist.doc.dir}"
              preservelastmodified="true">
		    <fileset dir="${doc.dir}/api"/>
        </copy>
    </target>

    <!-- ==================== Javadoc Target ============================= -->
    <!--
        The "javadoc" target creates Javadoc API documentation for the Java
        classes included in your application.  Normally, this is only required
        when preparing a distribution release, but is available as a separate
        target in case the developer wants to create Javadocs independently.
    -->
    <target name="javadoc"
            description="Create Javadoc API documentation" >
        <mkdir dir="${doc.dir}/api"/>
        <javadoc sourcepath="${src.dir}"
                 source="${compiler.source}"
                 destdir="${doc.dir}/api"
                 packagenames="com.*"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="${doc.window.title}" >
            <header><![CDATA[${doc.title}]]></header>
            <bottom><![CDATA[${doc.bottom}]]></bottom>
            <!--link href="http://java.sun.com/j2se/1.5.0/docs/api"/-->
            <classpath refid="project.class.path"/>
        </javadoc>
    </target>

    <!-- ==================== Junit Targets ================================ -->

    <!--
        Convenience JUnit testing target to run unit tests with the
        database setup in a known state, and to halt the build if
        there are failures.
    -->
    <target name="junit"
        depends="unit-test-run"
        description="Create a clean build and run JUnit tests"
    >
        <fail message="One or more Junit tests had an error" if="junit-error"/>
        <fail message="One or more Junit tests failed" if="junit-failed"/>
    </target>

    <target name="unit-test-run"
            depends="prep-test,compile-test,jar"
            description="Run the unit tests for the project after compiling the unit tests" >
        <copy file="${src.build.dir}/${entity-pruner.jar}"
              todir="${test.build.dir}"
              preservelastmodified="true"/>
    	<path id="test.class.path">
            <pathelement location="${test.properties.dir}"/>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${test.build.dir}">
                <include name="*.jar"/>
            </fileset>
            <pathelement location="${test.build.dir}/classes"/>
    	</path>
        <!-- get rid of old log files and results -->
        <delete file="${test.log.prefix}.log"/>
        <delete dir="${test.report.dir}" quiet="true"/>
        <delete dir="${test.results.dir}" quiet="true"/>
        <mkdir dir="${test.results.dir}"/>

        <junit
            printsummary="yes"
            fork="yes"
            errorproperty="junit-error"
            failureproperty="junit-failed"
            reloading="false">
        	
            <classpath refid="test.class.path"/>
            <formatter type="plain"/>
            <formatter type="xml"/>

            <batchtest todir="${test.results.dir}" if="testcase">
                <fileset dir="${test.build.dir}/classes"
                    includes="**/${testcase}.class"
               />
            </batchtest>
            <!-- We don't want to test the testhelper classes -->
            <batchtest todir="${test.results.dir}" unless="testcase">
                <fileset dir="${test.build.dir}/classes"
                    includes="**/*Test.class"
                    excludes="**/testhelper/**"
               />
            </batchtest>
        </junit>
    </target>

    <!-- Create HTML reports for the test results. -->
    <target name="unit-test-report"
        depends="unit-test-run"
        description="Create an HTML report of the unit test results after running the tests">
        <!-- Create test reports. -->
        <mkdir dir="${test.report.dir}"/>
        <junitreport todir="${test.report.dir}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${test.report.dir}" format="frames"/>
        </junitreport>
        <!-- call target to copy reports to network -->
        <antcall target="-copy-reports-to-network"/>
        <fail message="One or more Junit tests had an error" if="junit-error"/>
        <fail message="One or more Junit tests failed" if="junit-failed"/>
    </target>

    <!--
        Copy test reports to a server if a server var is defined.
    -->
    <target name="-copy-reports-to-network"
        if="test.report.server.dir"
        description="Create JUnit reports and move them to network server"
    >
        <!-- Copy the reports to our network server so folks can view them -->
        <copy todir="${test.report.server.dir}" failonerror="false">
            <fileset dir="${test.report.dir}"/>
        </copy>
        <copy file="${test.log.prefix}.log" todir="${test.report.server.dir}"
              failonerror="false"/>
    </target>
</project>
